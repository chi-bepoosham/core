version: '3.7'
services:
    haproxy:
        image: haproxy:alpine3.19
        container_name: haproxy
        links:
            - application_1
            - application_2
        depends_on:
            application_2:
                condition: service_healthy
            redis:
                condition: service_healthy
        ports:
            - "${APPLICATION_PUBLISH_PORT}:8080"
        volumes:
            - './docker/haproxy/config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro'
        restart: always
        networks:
            - main
    redis:
        image: redis:alpine3.21
        container_name: redis_main
        restart: always
        environment:
            REDIS_ARGS: "--requirepass ${REDIS_PASSWORD}"
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "5"
        healthcheck:
            test: [ "CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping | grep PONG" ]
            interval: 5s
            timeout: 5s
            retries: 3
        expose:
            - "6379"
        command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
        volumes:
            - redis_data:/data
        networks:
            - main
    postgres:
        image: postgres:16-alpine
        container_name: postgres
        restart: always
        ports:
            - '5432:5432'
        environment:
            POSTGRES_DB: api_chebepoosham
            POSTGRES_USER: chebepoosham
            POSTGRES_PASSWORD: 'oS_}`ue3H376'
        volumes:
            - 'postgres_data:/var/lib/postgresql/data'
            - './docker/postgres/config/postgresql.conf:/var/lib/postgresql/data/postgresql.conf'
        networks:
            - main
    pgadmin:
        image: dpage/pgadmin4
        container_name: pgadmin4
        restart: always
        ports:
            - '1490:80'
        depends_on:
            - postgres
        environment:
            PGADMIN_DEFAULT_EMAIL: develop@chebepoosham.ir
            PGADMIN_DEFAULT_PASSWORD: "lU8[0c<06kWz"
        volumes:
            - 'pgadmin_data:/var/lib/pgadmin'
        networks:
            - main
    web_server:
        image: nginx:latest
        container_name: web_server
        restart: always
        expose:
            - "80"
        volumes:
            - './:/usr/share/nginx/html'
            - './docker/nginx/config/web_server/nginx.conf:/etc/nginx/nginx.conf'
        networks:
            - main
        depends_on:
            - application_1
    application_1:
        build:
            context: .
            dockerfile: Dockerfile
        image: chibepoosham_application_1:latest
        container_name: application_1
        working_dir: /var/www
        restart: always
        tty: true
        user: "root"
        volumes:
            - './:/var/www:rw'
            - './docker/php/config/php.ini:/usr/local/etc/php/php.ini-development'
            - './docker/php/config/php.ini:/usr/local/etc/php/php.ini-production'
            - './docker/php/config/php.ini:/usr/local/etc/php/conf.d/custom.ini'
        networks:
            - main
        depends_on:
            redis:
                condition: service_healthy
            postgres:
                condition: service_started
    application_2:
        image: chibepoosham_application_1:latest
        container_name: application_2
        working_dir: /var/www
        restart: always
        tty: true
        user: "root"
        command: sh -c  "php artisan octane:start --server=swoole --host=0.0.0.0 --rpc-port=6001 --port=1550"
        volumes:
            - './:/var/www:rw'
            - './docker/php/config/php.ini:/usr/local/etc/php/php.ini-development'
            - './docker/php/config/php.ini:/usr/local/etc/php/php.ini-production'
        networks:
            - main
        expose:
            - "1550"
        depends_on:
            redis:
                condition: service_healthy
            postgres:
                condition: service_started
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:1550" ]
            interval: 15s
            timeout: 2s
            retries: 1
    application_queue:
        image: chibepoosham_application_1:latest
        container_name: application_queue
        working_dir: /var/www
        command: sh -c "php artisan queue:work redis --daemon --timeout=0 --queue=laravel,${REDIS_QUEUE}"
        restart: always
        user: "root"
        depends_on:
            redis:
                condition: service_healthy
        volumes:
            - './:/var/www:rw'
        networks:
            - main
#    application_redis_subscribe:
#        image: chibepoosham_application_1:latest
#        container_name: application_redis_subscribe
#        working_dir: /var/www
#        command: sh -c "php artisan redis:subscribe"
#        restart: always
#        user: "root"
#        depends_on:
#            redis:
#                condition: service_healthy
#            application_queue:
#                    condition: service_started
#        volumes:
#            - './:/var/www:rw'
#        networks:
#            - main
#    application_python:
#        build:
#            context: .
#            dockerfile: PythonModule/Dockerfile
#        image: chibepoosham_application_python:latest
#        container_name: application_python
#        working_dir: /var/www
#        restart: on-failure
#        volumes:
#            - './PythonModule/:/var/www'
#        expose:
#            - "8000"
#        depends_on:
#            redis:
#                condition: service_healthy
#            application_queue:
#                condition: service_started
#        networks:
#            - main
#        deploy:
#            resources:
#                reservations:
#                    devices:
#                        - driver: nvidia
#                          device_ids: ['all']
#                          capabilities: [ gpu ]
#        environment:
#            - NVIDIA_VISIBLE_DEVICES='all'  # Use 'all' to expose all GPUs
#            - NVIDIA_DRIVER_CAPABILITIES=compute,utility
networks:
    main:
        driver: bridge
volumes:
    redis_data:
        driver: local
    postgres_data:
        driver: local
    pgadmin_data:
        driver: local
